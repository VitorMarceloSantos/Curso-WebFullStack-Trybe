Diferenças entre Python e JavaScript:
  - Não é necessário a utilização de let, var ou const nas atribuições.
  - o incremento ou decremento não é válido na sintaxe ++, --.
  - // divisão sem resto.
  - operadores são comuns a todas as linguagens de programação. Entretanto, nem tudo é semelhante. Por exemplo, se realizarmos a operação de comparação '1' == 1, o resultado será falso (False).
  - Quando queremos fazer operações lógicas, como verificar se uma temperatura está entre dois valores, utilizamos o operador and. Ou seja, para verificar se uma temperatura é menor que 25 graus e maior que 18 graus, podemos fazer algo como temperatura < 25 and temperatura > 18. Embora uma maneira mais pythonica de se escrever esta operação seja 18 < temperatura < 25. Da mesma forma, podemos validar intervalos utilizando o operador or. Por exemplo, se em um parque pessoas com idade menor ou igual a 5 e maiores de 65 anos não pagam, poderíamos escrever uma validação da seguinte maneira idade <= 5 or idade >= 65.

Tipos em Python: https://docs.python.org/3/library/stdtypes.html

Listas (list) -> array: uma lista é uma sequência mutável e ordenada de elementos. Ela pode armazenar elementos heterogêneos, ter seu tamanho variável e crescer à medida que itens são adicionados. PODE SER ALTERADA.
Exemplos: 
  fruits = ["laranja", "maçã", "uva", "abacaxi"]  # elementos são definidos separados por vírgula, envolvidos por colchetes

  fruits[0]  # o acesso é feito por índices iniciados em 0

  fruits[-1]  # o acesso também pode ser negativo

  fruits.append("banana")  # adicionando uma nova fruta

  fruits.remove("abacaxi")  # removendo uma fruta

  fruits.extend(["pera", "melão", "kiwi"])  # acrescenta uma lista de frutas a lista original

  fruits.index("maçã")  # retorna o índice onde a fruta está localizada, neste caso, 1

  fruits.sort()  # ordena a lista de frutas

Tuplas (tuple): São similares a listas, porém NÃO PODE SER ALTERADA durante a execução do programa.
Exemplos:
  user = ("Will", "Marcondes", 42)  # elementos são definidos separados por vírgula, envolvidos por parênteses

  user[0]  # acesso também por índices

Conjuntos (set): Um conjunto é uma coleção de elementos únicos e não ordenados. Conjuntos implementam operações de união, intersecção e outras.
Exemplo: 
  permissions = {"member", "group"}  # elementos separados por vírgula, envolvidos por chaves

  permissions.add("root")  # adiciona um novo elemento ao conjunto

  permissions.add("member")  # como o elemento já existe, nenhum novo item é adicionado ao conjunto

  permissions.union({"user"})  # retorna um conjunto resultado da união

  permissions.intersection({"user", "member"})  # retorna um conjunto resultante da intersecção dos conjuntos

  permissions.difference({"user"})  # retorna a diferença entre os dois conjuntos

Conjuntos imutáveis (frozenset): É uma variação do set, NÃO PODEM SER MODIFICADOS, ou seja, seus elementos não podem ser modificados durante a execução do programa.
Exemplo: 
  permissions = frozenset(["member", "group"])  # assim como o set, qualquer estrutura iterável pode ser utilizada para criar um frozenset

  permissions.union({"user"})  # novos conjuntos imutáveis podem ser criados à partir do original, mas o mesmo não pode ser modificado

  permissions.intersection({"user", "member"})  # retorna um conjunto resultante da intersecção dos conjuntos

  permissions.difference({"user"})  # retorna a diferença entre os dois conjuntos

Dicionários (dict) -> objetos: Estrutura que associa uma chave a um determinado valor. É a representação do tão famoso objeto que utilizamos em JavaScript.
Exemplo:
  people_by_id = {1: "Maria", 2: "Fernanda", 3: "Felipe"}  # elementos no formato "chave: valor" separados por vírgula, envolvidos por chaves

  people_by_name = {"Maria": 1, "Fernanda": 2, "Felipe": 3}  # outro exemplo, dessa vez usando strings como chaves. As aspas são necessárias para que o Python não ache que `Maria`, `Fernanda` e `Felipe` sejam variáveis.

  # elementos são acessados por suas chaves
  people_by_id[1]  # saída: Maria

  # elementos podem ser removidos com a palavra chave del
  del people_by_id[1]
  people_by_id.items()  # dict_items([(2, "Fernanda"), (3, "Felipe")])
  # é retornada uma coleção iterável de tuplas contendo chaves e valores

Range (range): Estrutura capaz de gerar uma sequência numérica de um valor inicial até um valor final, modificando seu valor de acordo com o passo (step) definido. Pode ser declarado como range( [start], [stop], [step] ), em que start e step podem ser omitidos, possuindo valores iniciais iguais a 0 e 1 respectivamente. Anota aí ✏️: O stop não é incluído na sequência, portanto, caso queira uma sequência de 1 até 10 a chamada deverá ser range(1, 11). Seus valores são criados à medida que esta sequência é percorrida.
Exemplo:
  # definimos somente o valor de parada
  list(range(5))  # saída: [0, 1, 2, 3, 4]

  # definimos o valor inicial e o de parada
  list(range(1, 6))  # saída: [1, 2, 3, 4, 5]

  # definimos valor inicial, de parada e modificamos o passo para 2
  list(range(1, 11, 2))  # saída: [1, 3, 5, 7, 9]

  # podemos utilizar valores negativos para as entradas também
  list(range(10, 0, -1))  # saída: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]